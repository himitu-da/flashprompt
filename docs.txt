# FlashPrompt アプリケーション ドキュメント

## 概要

FlashPrompt は、プロンプトテンプレートを使用してテキストを生成するデスクトップアプリケーションです。ユーザーはプロンプトテンプレートを登録し、テンプレート内の変数を入力することで、カスタマイズされたプロンプトを生成し、クリップボードにコピーして利用できます。

本アプリケーションは、以下の主要な機能を備えています。

* **プロンプトテンプレートの管理**: プロンプトテンプレートの作成、編集、削除、保存が可能です。
* **変数入力**: プロンプトテンプレート内の変数をGUI上で入力し、プレビューを確認できます。
* **クリップボード連携**: 生成されたプロンプトをクリップボードにコピーできます。
* **設定**: アプリケーションの動作設定（保存ディレクトリなど）を管理できます。
* **UIテーマ**: 一貫性のあるUIテーマを提供し、ユーザーエクスペリエンスを向上させます。
* **キーボードナビゲーション**: キーボード操作によるタブ切り替えやリスト操作をサポートし、効率的な操作が可能です。

## ファイル構成

アプリケーションは以下のPythonファイルで構成されています。

1. **constants.py**:
    * アプリケーション全体で使用される定数を定義します。
    * UIの色テーマ (`COLORS`)、フォントスタイル (`FONTS`)、ウィンドウサイズ (`WINDOW_SIZES`)、デフォルト設定 (`DEFAULT_SETTINGS`) が含まれます。
    * これらはアプリケーション全体で一貫した外観と動作を保証するために使用されます。

2. **main.py**:
    * アプリケーションのエントリーポイントとなるファイルです。
    * `main()` 関数を定義し、Tkinter のルートウィンドウを作成し、`FlashPromptApp` クラスのインスタンスを生成してアプリケーションのメインループを開始します。
    * アプリケーション起動時に最初に実行されるファイルです。

3. **models.py**:
    * アプリケーションのデータモデルとビジネスロジックを定義します。
    * `PromptManager` クラスと `SettingsManager` クラスが含まれます。
    * `PromptManager`: プロンプトの保存、読み込み、管理 (作成、削除、取得) を担当します。プロンプトは JSON ファイル (`prompts.json`) に保存され、アプリケーションのローカルアプリケーションデータディレクトリに格納されます。
    * `SettingsManager`: アプリケーション設定の保存、読み込み、管理を担当します。設定は JSON ファイル (`settings.json`) に保存され、アプリケーションのローカルアプリケーションデータディレクトリに格納されます。デフォルト設定の読み込みや設定項目の補完機能も持ちます。

4. **utils.py**:
    * UI ユーティリティ関数とスタイル設定を定義します。
    * `setup_styles(style)` 関数は、`ttk.Style` オブジェクトを設定し、アプリケーション全体で一貫した UI テーマを提供します。様々な `ttk` ウィジェットのスタイルを構成します。
    * `calculate_window_position(parent, width, height)` 関数は、新しいウィンドウを親ウィンドウの中央に配置するための位置を計算します。画面外に出ないように位置を調整するロジックが含まれています。

5. **views.py**:
    * アプリケーションの UI ビュー (ユーザーインターフェース) を定義します。
    * `FlashPromptApp` クラスはメインアプリケーションウィンドウ (`tk.Tk`) を管理します。プロンプト一覧、テンプレート登録、設定のタブを持つノートブック UI を提供します。
    * `PromptCreationWindow` クラスは、プロンプトの作成と編集を行うための Toplevel ウィンドウを管理します。プロンプト作成タブとテンプレート変更タブを備え、変数入力やテンプレート編集、プレビュー機能を提供します。

## 主要クラス詳細

### 1. `PromptManager` (models.py)

* **役割**: プロンプトテンプレートの永続化と管理を担当します。
* **機能**:
    * **初期化 (`__init__`)**:
        * アプリケーションデータディレクトリ (`%LOCALAPPDATA%/flashprompt`) のパスを設定します。
        * プロンプトファイル (`prompts.json`) のパスを設定します。
        * ディレクトリとプロンプトファイルが存在しない場合は作成します (`_ensure_directory`)。
        * プロンプトファイルからプロンプトを読み込みます (`_load_prompts`)。
    * **`_ensure_directory()`**: アプリケーションデータディレクトリとプロンプトファイルが存在することを保証します。存在しない場合は、ディレクトリと空のプロンプトファイルを生成します。
    * **`_load_prompts()`**: プロンプトファイルからプロンプトを読み込みます。ファイルが存在しない場合や JSON デコードに失敗した場合は、空のリストを返します。
    * **`save_prompt(name, template)`**: 新しいプロンプトを保存します。プロンプト名とテンプレートを辞書形式で保存し、`_save_to_file()` を呼び出してファイルに書き込みます。
    * **`_save_to_file()`**: 現在のプロンプトリストを JSON ファイルに保存します。
    * **`delete_prompt(name)`**: 指定された名前のプロンプトを削除します。プロンプトリストから該当するプロンプトを削除し、`_save_to_file()` を呼び出して変更をファイルに反映します。
    * **`get_prompt(name)`**: 指定された名前のプロンプトを取得します。プロンプトリストを検索し、一致するプロンプトを返します。見つからない場合は `None` を返します。

### 2. `SettingsManager` (models.py)

* **役割**: アプリケーション設定の永続化と管理を担当します。
* **機能**:
    * **初期化 (`__init__`)**:
        * アプリケーションデータディレクトリ (`%LOCALAPPDATA%/flashprompt`) のパスを設定します。
        * 設定ファイル (`settings.json`) のパスを設定します。
        * ディレクトリと設定ファイルが存在しない場合は作成します (`_ensure_directory`)。
        * 設定ファイルから設定を読み込みます (`_load_settings`)。
    * **`_ensure_directory()`**: アプリケーションデータディレクトリと設定ファイルが存在することを保証します。存在しない場合は、ディレクトリとデフォルト設定ファイルを作成します。
    * **`_load_settings()`**: 設定ファイルから設定を読み込みます。ファイルが存在しない場合や JSON デコードに失敗した場合は、デフォルト設定 (`DEFAULT_SETTINGS`) を返します。設定ファイルに不足しているキーがある場合は、デフォルト設定から補完します。
    * **`save_settings(settings)`**: 設定を JSON ファイルに保存します。引数として渡された設定辞書をファイルに書き込みます。
    * **`get_settings()`**: 現在の設定を取得します。現在の設定辞書を返します。

### 3. `FlashPromptApp` (views.py)

* **役割**: メインアプリケーションウィンドウ (`tk.Tk`) を管理し、アプリケーション全体の UI を構築します。
* **機能**:
    * **初期化 (`__init__`)**:
        * ルートウィンドウ (`tk.Tk`) を設定し、タイトルを設定します。
        * メインウィンドウの最小サイズを設定します (`WINDOW_SIZES['main_min']`)。
        * `PromptManager` と `SettingsManager` のインスタンスを作成します。
        * `ttk.Style` を設定し、UI テーマを適用します (`setup_styles`)。
        * ノートブック (`ttk.Notebook`) を作成し、タブ (プロンプト一覧、テンプレート登録、設定) を追加します。
        * キーボードナビゲーション (左右キーでのタブ切り替え) を設定します。
        * 各タブの UI をセットアップするメソッド (`_setup_list_tab`, `_setup_template_tab`, `_setup_settings_tab`) を呼び出します。
    * **`_setup_list_tab()`**: 「プロンプト一覧」タブの UI をセットアップします。プロンプト作成ボタン、削除ボタン、プロンプト一覧の `ttk.Treeview` を作成し、配置します。プロンプト一覧のダブルクリック/Enter キーでの編集、上下キーでのナビゲーションを設定します。`_update_prompt_list()` を呼び出してプロンプト一覧を初期化します。
    * **`_open_prompt_creation(event=None)`**: プロンプト作成/編集ウィンドウ (`PromptCreationWindow`) を開きます。TreeView で選択されているプロンプトがある場合は編集モード、ない場合は新規作成モードで開きます。
    * **`_delete_prompt()`**: TreeView で選択されているプロンプトを削除します。削除確認メッセージボックスを表示し、ユーザーが OK を選択した場合に `PromptManager.delete_prompt()` を呼び出してプロンプトを削除し、`_update_prompt_list()` を呼び出してプロンプト一覧を更新します。
    * **`_setup_template_tab()`**: 「テンプレート登録」タブの UI をセットアップします。プロンプト名入力欄 (`ttk.Entry`), テンプレートテキストエリア (`tk.Text`), 変数一覧リストボックス (`tk.Listbox`), 各種ボタン (保存、破棄、変数追加、変数挿入) を作成し、配置します。テンプレートテキストエリアのキーリリースイベント (`_on_template_change`)、変数一覧リストボックスのダブルクリックイベント (`_insert_selected_variable_template_tab`)、各種ボタンのコマンドを設定します。
    * **`_on_template_change(event=None)`**: テンプレートテキストが変更されたときに、正規表現 (`re.findall`) を使用してテンプレートから変数を抽出し、変数一覧リストボックスを更新します。
    * **`_insert_selected_variable_template_tab(event=None)`**: 変数一覧リストボックスで選択されている変数をテンプレートテキストエリアのカーソル位置に挿入します。
    * **`_show_variable_dialog_template_tab()`**: 変数追加ダイアログ (`tk.Toplevel`) を表示します。ダイアログ内で変数名を入力させ、OK ボタンが押されたらテンプレートテキストエリアに `{{変数名}}` 形式で変数を挿入し、変数一覧を更新します。
    * **`_save_template_tab()`**: 「テンプレート登録」タブで入力されたプロンプト名とテンプレートを `PromptManager.save_prompt()` を使用して保存し、プロンプト一覧を更新 (`_update_prompt_list`) し、テンプレート入力フィールドをクリア (`_clear_template_fields_tab`) します。保存成功メッセージボックスを表示します。
    * **`_discard_current_template_input_tab()`**: 「テンプレート登録」タブの入力内容を破棄するかどうか確認メッセージボックスを表示し、ユーザーが OK を選択した場合、テンプレート入力フィールドをクリア (`_clear_template_fields_tab`) します。
    * **`_clear_template_fields_tab()`**: テンプレート名入力欄とテンプレートテキストエリアをクリアします。
    * **`_update_prompt_list()`**: `PromptManager.prompts` からプロンプト一覧を取得し、`ttk.Treeview` を更新します。
    * **`_setup_settings_tab()`**: 「設定」タブの UI をセットアップします。保存ディレクトリ設定 UI (ラベルフレーム、ディレクトリ入力欄 `ttk.Entry`, 参照ボタン `ttk.Button`, 保存ボタン `ttk.Button`) を作成し、配置します。ディレクトリ入力欄には現在の設定 (`SettingsManager.get_settings`) が初期値として設定されます。
    * **`_browse_directory()`**: ディレクトリ参照ダイアログ (`filedialog.askdirectory`) を開き、ユーザーに保存ディレクトリを選択させ、ディレクトリ入力欄を更新します。
    * **`_save_settings()`**: ディレクトリ入力欄からディレクトリパスを取得し、`SettingsManager.save_settings()` を使用して設定を保存します。設定保存成功メッセージボックスを表示します。
    * **`_next_tab(event=None)`**: 次のタブに移動します。キーボードナビゲーション (右キー) 用です。テキスト入力ウィジェットにフォーカスがない場合にのみタブを切り替えます。
    * **`_previous_tab(event=None)`**: 前のタブに移動します。キーボードナビゲーション (左キー) 用です。テキスト入力ウィジェットにフォーカスがない場合にのみタブを切り替えます。
    * **`_navigate_list(event)`**: プロンプト一覧 (`ttk.Treeview`) をキーボード (上下キー) でナビゲートします。リストの端でループしないように制御し、選択されたアイテムが見えるようにスクロールします。

### 4. `PromptCreationWindow` (views.py)

* **役割**: プロンプトの作成と編集を行うための Toplevel ウィンドウ (`tk.Toplevel`) を管理します。
* **機能**:
    * **初期化 (`__init__`)**:
        * 親ウィンドウ (`tk.Tk` または `tk.Toplevel`) を設定し、タイトルを設定します。
        * ウィンドウを常に最前面に表示するように設定 (`attributes('-topmost', True)`) します。
        * ウィンドウのリサイズを許可し、最小サイズを設定します (`WINDOW_SIZES['prompt_creation_min']`)。
        * ウィンドウの位置を親ウィンドウの中央に計算し、ジオメトリを設定します (`calculate_window_position`, `WINDOW_SIZES['prompt_creation']`)。
        * コンストラクタ引数として渡されたプロンプトデータ (`prompt_data`) を保存します。編集をキャンセルするために元のテンプレートとプロンプト名を保存します (`original_template`, `original_name`)。
        * `ttk.Style` を設定し、`Danger.TButton`, `Cancel.TButton` スタイルを定義します。
        * ノートブック (`ttk.Notebook`) を作成し、「プロンプト作成」タブと「テンプレート変更」タブを追加します。
        * 各タブの UI をセットアップするメソッド (`_setup_prompt_creation_tab`, `_setup_template_change_tab`) を呼び出します。
        * デフォルトで「プロンプト作成」タブを選択します (`notebook.select`)。
        * 変数一覧リストボックスを初期化します (`_update_variables_listbox`)。
    * **`_setup_prompt_creation_tab()`**: 「プロンプト作成」タブの UI をセットアップします。変数入力エリア (`_setup_variable_input_area`), 生成されたプロンプトのプレビューエリア (`tk.Text`), コピーボタン (`ttk.Button`) を作成し、配置します。初期プレビューを生成 (`update_preview`) し、最初の変数入力欄にフォーカスを移動します。
    * **`_setup_template_change_tab()`**: 「テンプレート変更」タブの UI をセットアップします。テンプレート編集エリア (`tk.Text`), 変数一覧リストボックス (`tk.Listbox`), 変数操作ボタン (変数追加、変数挿入), 保存ボタン, 破棄ボタン を作成し、配置します。テンプレートテキストエリアには既存のテンプレートを挿入し、キーリリースイベント (`_on_template_change_change_tab`) を設定します。変数一覧リストボックスのダブルクリックイベント (`_insert_selected_variable_change_tab`)、変数操作ボタン、保存ボタン、破棄ボタンのコマンドを設定します。
    * **`_setup_variable_input_area(parent_frame)`**: 変数入力エリアをセットアップします。テンプレートから変数を抽出し (`re.findall`)、各変数に対応するラベルとテキスト入力欄 (`tk.Text`) を動的に生成します。最初の入力欄へのフォーカス設定、キーリリースイベント (`update_preview`) を設定します。変数が存在しない場合は、変数入力欄を生成せず、空の `var_entries` 辞書を初期化します。
    * **`_create_variable_input_row(var)`**: 変数入力行を作成するヘルパー関数です。変数名ラベルとテキスト入力欄 (`tk.Text`) を `vars_frame` 内に作成し、`var_entries` 辞書に登録します。
    * **`_update_variables_prompt_creation_tab()`**: テンプレート内の変数の変更に基づいて、「プロンプト作成」タブの変数入力エリアを更新します。既存の `vars_frame` を破棄し、`_setup_variable_input_area` を呼び出して変数入力エリアを再構築し、プレビューを更新します。
    * **`update_preview(event)`**: 変数入力に基づいてプレビューテキスト (`preview_text`) を更新します。テンプレートと変数入力欄の値を取得し、`format_map` (または `replace` による置換処理) を使用してプレビューテキストを生成し、`preview_text` ウィジェットに挿入します。
    * **`copy_to_clipboard()`**: プレビューテキストをクリップボードにコピーします。`clipboard_clear`, `clipboard_append` を使用してクリップボードにコピーし、成功メッセージボックスを表示します。
    * **`_update_variables_listbox()`**: テンプレート内の変数の変更に基づいて、「テンプレート変更」タブの変数一覧リストボックスを更新します。テンプレートから変数を抽出し (`re.findall`)、リストボックスの内容をクリアし、抽出された変数をソートしてリストボックスに挿入します。
    * **`_on_template_change_change_tab(event=None)`**: 「テンプレート変更」タブのテンプレートテキストが変更されたときに、変数を更新します。テンプレートテキストから変数を抽出し (`re.findall`)、変数一覧リストボックスを更新します。
    * **`_insert_selected_variable_change_tab(event=None)`**: 「テンプレート変更」タブの変数一覧リストボックスで選択された変数をテンプレートテキストエリアのカーソル位置に挿入します。挿入後、カーソル位置を調整し、テンプレートテキストエリアにフォーカスを移動します。また、`_update_variables_prompt_creation_tab()` を呼び出して「プロンプト作成」タブの変数入力を更新し、テンプレート変更を反映させます。
    * **`_show_variable_dialog_change_tab()`**: 「テンプレート変更」タブから変数追加ダイアログ (`tk.Toplevel`) を表示します。ダイアログ内で変数名を入力させ、OK ボタンが押されたらテンプレートテキストエリアに `{{変数名}}` 形式で変数を挿入し、ダイアログを閉じ、変数一覧を更新し、テンプレートテキストエリアにフォーカスを移動します。また、`_update_variables_prompt_creation_tab()` を呼び出して「プロンプト作成」タブの変数入力を更新し、テンプレート変更を反映させます。
    * **`_save_template_change_tab()`**: 「テンプレート変更」タブで行われたテンプレートの変更を保存します。保存確認メッセージボックスを表示し、ユーザーが OK を選択した場合、新しいテンプレートを取得し、`PromptManager.delete_prompt()` と `PromptManager.save_prompt()` を使用してプロンプトを更新します。UI を編集不可状態に戻し (今回は不要)、変数入力エリアと変数一覧を更新し、プレビューを更新し、保存成功メッセージボックスを表示します。
    * **`_discard_current_template_input_change_tab()`**: 「テンプレート変更」タブで行われたテンプレートの編集を破棄し、元の状態に戻します。破棄確認メッセージボックスを表示し、ユーザーが OK を選択した場合、テンプレートテキストエリアの内容を元のテンプレート (`original_template`) に戻し、UI を編集不可状態に戻し (今回は不要)、変数一覧と変数入力エリアを更新し、プレビューを更新します。

## UI 設計

アプリケーションの UI はタブベースのインターフェースを採用しており、主要な機能ごとにタブが分かれています。

1. **プロンプト一覧タブ**:
    * 登録済みのプロンプトテンプレートを一覧表示します (`ttk.Treeview`)。
    * プロンプトの作成、削除ボタンが配置されています。
    * プロンプトをダブルクリックまたは Enter キーを押すと、プロンプト編集ウィンドウ (`PromptCreationWindow`) が開きます。

2. **テンプレート登録タブ**:
    * 新しいプロンプトテンプレートを登録するためのタブです。
    * プロンプト名入力欄 (`ttk.Entry`)、テンプレートテキストエリア (`tk.Text`)、変数一覧リストボックス (`tk.Listbox`)、保存ボタン、破棄ボタン、変数操作ボタン (変数追加、変数挿入) が配置されています。
    * テンプレートテキストエリアで変数を `{{変数名}}` 形式で記述すると、変数一覧リストボックスに自動的に表示されます。

3. **設定タブ**:
    * アプリケーションの各種設定を行うためのタブです。
    * 現在は保存ディレクトリの設定のみが実装されています。
    * 保存ディレクトリの入力欄 (`ttk.Entry`)、参照ボタン (`ttk.Button`)、設定保存ボタン (`ttk.Button`) が配置されています。

4. **プロンプト作成/編集ウィンドウ (`PromptCreationWindow`)**:
    * プロンプトの作成または編集を行うための専用ウィンドウ (`tk.Toplevel`) です。
    * **プロンプト作成タブ**:
        * プロンプトテンプレート内の変数を入力するための入力欄 (`tk.Text` を動的に生成) が表示されます。
        * 変数入力に基づいて生成されたプロンプトのプレビュー (`tk.Text`) が表示されます。
        * コピーボタン (`ttk.Button`) が配置されており、プレビューテキストをクリップボードにコピーできます。
    * **テンプレート変更タブ**:
        * プロンプトテンプレートを直接編集するためのテキストエリア (`tk.Text`) が表示されます。
        * テンプレート内で使用されている変数の一覧 (`tk.Listbox`) が表示されます。
        * 変数一覧から変数を選択してテンプレートテキストエリアに挿入したり、変数追加ダイアログから新しい変数を追加したりできます。
        * 保存ボタン、破棄ボタンが配置されています。

## データモデル

アプリケーションで使用されるデータモデルは以下の通りです。

* **プロンプト**:
    * JSON ファイル (`prompts.json`) にリスト形式で保存されます。
    * 各プロンプトは辞書形式で表現され、以下のキーを持ちます。
        * `"name"` (str): プロンプトの名前。
        * `"template"` (str): プロンプトテンプレートのテキスト。変数部分は `{{変数名}}` 形式で記述されます。

* **設定**:
    * JSON ファイル (`settings.json`) に辞書形式で保存されます。
    * 現在は以下の設定項目が定義されています。
        * `"save_directory"` (str): 保存ディレクトリのパス。デフォルトは空文字列です。

## 設定

アプリケーションの設定は `SettingsManager` クラスによって管理され、JSON ファイル (`settings.json`) に保存されます。

現在の設定項目は以下の通りです。

* **保存ディレクトリ (`save_directory`)**:
    * 生成されたプロンプトやその他のファイルを保存するディレクトリを指定します。
    * デフォルトは空文字列で、ユーザーが設定タブから変更できます。

## ユーティリティ関数

`utils.py` には以下のユーティリティ関数が定義されています。

* **`setup_styles(style)`**:
    * `ttk.Style` オブジェクトを設定し、アプリケーション全体で一貫した UI テーマを提供します。
    * `constants.py` で定義された `COLORS` と `FONTS` を使用して、様々な `ttk` ウィジェットのスタイルを構成します。
    * アプリケーションの起動時に一度呼び出され、UI の外観を初期化します。

* **`calculate_window_position(parent, width, height)`**:
    * 新しいウィンドウ (`tk.Toplevel`) を親ウィンドウ (`tk.Tk` または `tk.Toplevel`) の中央に配置するための x, y 座標を計算します。
    * 親ウィンドウの位置とサイズ、およびスクリーンのサイズを取得し、ウィンドウが画面外に出ないように位置を調整します。
    * 新しいウィンドウを作成する際に、そのウィンドウを画面中央に表示するために使用されます。

## 意図と設計思想

* **モジュール性**: コードを機能ごとにモジュール (ファイル) に分割し、各モジュールの役割を明確にすることで、コードの可読性、保守性、再利用性を高めています。
* **MVC (Model-View-Controller) の考え方**: 完全な MVC アーキテクチャではありませんが、データモデル (`models.py`), UI ビュー (`views.py`), スタイルとユーティリティ (`utils.py`) を分離することで、関心の分離を図っています。
* **設定と定数の分離**: UI のスタイル、フォント、ウィンドウサイズ、デフォルト設定などの定数を `constants.py` に集約することで、設定変更やテーマ変更を容易にしています。
* **JSON による永続化**: プロンプトと設定を JSON ファイルに保存することで、簡単なデータ永続化を実現しています。
* **Tkinter と ttk**: GUI フレームワークとして Tkinter を採用し、モダンなルックアンドフィールを提供するために `ttk` (Themed Tk) ウィジェットを使用しています。
* **ユーザーエクスペリエンス**: キーボードナビゲーション、コピー機能、プレビュー機能など、ユーザーエクスペリエンスを向上させるための機能を盛り込んでいます。
* **日本語 UI**: 日本語環境のユーザーをターゲットとしており、UI のテキストやドキュメントを日本語で記述しています。

## Q&A セクション

**Q: プロンプトや設定ファイルはどこに保存されますか？**
A: プロンプト (`prompts.json`) と設定 (`settings.json`) ファイルは、アプリケーションのローカルアプリケーションデータディレクトリ (`%LOCALAPPDATA%/flashprompt`) に保存されます。Windows のエクスプローラーで `%LOCALAPPDATA%/flashprompt` と入力して Enter キーを押すと、ディレクトリを開くことができます。

**Q: プロンプトテンプレートで変数を使用するにはどうすればよいですか？**
A: プロンプトテンプレート内で変数を `{{変数名}}` の形式で記述します。例えば、`今日の天気は{{天気}}です。` のように記述します。テンプレート登録タブまたはプロンプト編集ウィンドウでテンプレートを編集する際に、変数一覧リストボックスや変数追加ダイアログを使用して変数を挿入できます。プロンプト作成ウィンドウでは、テンプレート内の変数に対応する入力欄が表示され、値を入力することでプレビューが更新されます。

**Q: UI の色やフォントをカスタマイズできますか？**
A: `constants.py` ファイル内の `COLORS` 辞書と `FONTS` 辞書を編集することで、UI の色テーマやフォントスタイルをカスタマイズできます。これらの辞書を編集した後、アプリケーションを再起動すると変更が反映されます。

**Q: プロンプト一覧の表示順を変更できますか？**
A: 現状のコードでは、プロンプト一覧はプロンプト名でソートされていません。`FlashPromptApp._update_prompt_list()` メソッドを修正することで、プロンプト名でソートするように変更できます。例えば、`self.prompt_manager.prompts` をソートしてから `Treeview` に挿入するように変更できます。

**Q: テンプレート登録タブでテンプレートを編集中にタブを切り替えると、編集内容が失われますか？**
A: はい、テンプレート登録タブでテンプレートを編集中にタブを切り替えると、編集内容は保存されずに失われます。編集内容を保存するには、必ず「保存」ボタンをクリックしてください。

**Q: 変数名に使える文字の制限はありますか？**
A: 変数名には、英数字とアンダースコア (`_`) が使用できます。変数名にスペースや特殊文字を含めることは推奨されません。

**Q: プロンプトテンプレートの構文 (`{{変数名}}` 形式) を変更できますか？**
A: プロンプトテンプレートの構文 (`{{変数名}}` 形式) を変更するには、`views.py` の `PromptCreationWindow.update_preview()` メソッドと `FlashPromptApp._on_template_change()` メソッド、および関連する正規表現 (`re.findall(r'\{\{(\w+)\}\}', template)`) を修正する必要があります。

**Q: 設定タブで保存ディレクトリを変更しても、すぐに反映されません。**
A: 設定タブで保存ディレクトリを変更しても、現在実装されている機能では、生成されたプロンプトの保存先など、保存ディレクトリを使用する機能がまだ実装されていません。将来のバージョンで保存ディレクトリを使用する機能が実装された際に、設定が反映されるようになります。

**Q: アプリケーションを起動すると、常に最前面に表示されます。通常表示に戻すにはどうすればよいですか？**
A: `FlashPromptApp` クラスと `PromptCreationWindow` クラスの `__init__` メソッドで `self.root.attributes('-topmost', True)` および `self.window.attributes('-topmost', True)` を記述しているため、ウィンドウが常に最前面に表示されます。通常表示に戻すには、これらの行を削除またはコメントアウトしてください。

**Q: プロンプト一覧でプロンプトを検索する機能はありますか？**
A: 現状のコードでは、プロンプト一覧に検索機能はありません。将来のバージョンで検索機能を追加することを検討できます。

**Q: 変数入力欄を複数行にできますか？**
A: はい、変数入力欄には `tk.Text` ウィジェットを使用しているため、複数行の入力をサポートしています。必要に応じてスクロールバーも表示されます。

**Q: プロンプトテンプレートをインポート/エクスポートする機能はありますか？**
A: 現状のコードでは、プロンプトテンプレートをインポート/エクスポートする機能はありません。将来のバージョンで JSON ファイル形式でのインポート/エクスポート機能を追加することを検討できます。